PHASE_3 
lab-2@lab2-OptiPlex-3040:~/Desktop/Bomb/Assignment 1_2(1)/Assignment 1/bomb003$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) b phase_3
Breakpoint 1 at 0x400f15
(gdb) r sol.txt
Starting program: /home/lab-2/Desktop/Bomb/Assignment 1_2(1)/Assignment 1/bomb003/bomb sol.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
2 456 // take two random number for user input 

Breakpoint 1, 0x0000000000400f15 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f15 <+0>:	sub    $0x18,%rsp
   0x0000000000400f19 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:	xor    %eax,%eax
   0x0000000000400f29 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:	mov    %rsp,%rdx
   0x0000000000400f31 <+28>:	mov    $0x4025af,%esi // values are being moved here
   0x0000000000400f36 <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt> // this takes the function as input
   0x0000000000400f3b <+38>:	cmp    $0x1,%eax // compare 1 with result from input
   0x0000000000400f3e <+41>:	jg     0x400f45 <phase_3+48> // jump only if %eax > 1 if not bomb will explode.
   0x0000000000400f40 <+43>:	callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:	cmpl   $0x7,(%rsp)  //comparing 7 with the value in %rsp
   0x0000000000400f49 <+52>:	ja     0x400f86 <phase_3+113> // jump if value is above 7 
   0x0000000000400f4b <+54>:	mov    (%rsp),%eax  // move %rsp to %eax
   0x0000000000400f4e <+57>:	jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:	mov    $0xc6,%eax
   0x0000000000400f5a <+69>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:	mov    $0x31e,%eax
   0x0000000000400f61 <+76>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:	mov    $0x299,%eax
   0x0000000000400f68 <+83>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:	mov    $0x3a,%eax
   0x0000000000400f6f <+90>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:	mov    $0x270,%eax
   0x0000000000400f76 <+97>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:	mov    $0x10b,%eax
   0x0000000000400f7d <+104>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:	mov    $0x80,%eax
   0x0000000000400f84 <+111>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:	callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:	mov    $0x0,%eax
   0x0000000000400f90 <+123>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:	mov    $0x3f,%eax
   0x0000000000400f97 <+130>:	cmp    0x4(%rsp),%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f9b <+134>:	je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:	callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:	mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:	xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:	je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:	add    $0x18,%rsp
   0x0000000000400fbb <+166>:	retq   
End of assembler dump.
(gdb) u * 0x0000000000400f31 
0x0000000000400f31 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:	sub    $0x18,%rsp
   0x0000000000400f19 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:	xor    %eax,%eax
   0x0000000000400f29 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:	mov    %rsp,%rdx
=> 0x0000000000400f31 <+28>:	mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:	cmp    $0x1,%eax
   0x0000000000400f3e <+41>:	jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:	callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:	ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:	mov    (%rsp),%eax
   0x0000000000400f4e <+57>:	jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:	mov    $0xc6,%eax
   0x0000000000400f5a <+69>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:	mov    $0x31e,%eax
   0x0000000000400f61 <+76>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:	mov    $0x299,%eax
   0x0000000000400f68 <+83>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:	mov    $0x3a,%eax
   0x0000000000400f6f <+90>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:	mov    $0x270,%eax
   0x0000000000400f76 <+97>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:	mov    $0x10b,%eax
   0x0000000000400f7d <+104>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:	mov    $0x80,%eax
   0x0000000000400f84 <+111>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:	callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:	mov    $0x0,%eax
   0x0000000000400f90 <+123>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:	mov    $0x3f,%eax
   0x0000000000400f97 <+130>:	cmp    0x4(%rsp),%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f9b <+134>:	je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:	callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:	mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:	xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:	je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:	add    $0x18,%rsp
   0x0000000000400fbb <+166>:	retq   
End of assembler dump.
(gdb) x/s 0x4025af
0x4025af:	"%d %d" // this shows that we have to take two user input 
(gdb) ni
0x0000000000400f36 in phase_3 ()
(gdb) ni
0x0000000000400f3b in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:	sub    $0x18,%rsp
   0x0000000000400f19 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:	xor    %eax,%eax
   0x0000000000400f29 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:	mov    %rsp,%rdx
   0x0000000000400f31 <+28>:	mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000400f3b <+38>:	cmp    $0x1,%eax
   0x0000000000400f3e <+41>:	jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:	callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:	ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:	mov    (%rsp),%eax
   0x0000000000400f4e <+57>:	jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:	mov    $0xc6,%eax
   0x0000000000400f5a <+69>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:	mov    $0x31e,%eax
   0x0000000000400f61 <+76>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:	mov    $0x299,%eax
   0x0000000000400f68 <+83>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:	mov    $0x3a,%eax
   0x0000000000400f6f <+90>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:	mov    $0x270,%eax
   0x0000000000400f76 <+97>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:	mov    $0x10b,%eax
   0x0000000000400f7d <+104>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:	mov    $0x80,%eax
   0x0000000000400f84 <+111>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:	callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:	mov    $0x0,%eax
   0x0000000000400f90 <+123>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:	mov    $0x3f,%eax
   0x0000000000400f97 <+130>:	cmp    0x4(%rsp),%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f9b <+134>:	je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:	callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:	mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:	xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:	je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:	add    $0x18,%rsp
   0x0000000000400fbb <+166>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffdf28      140737488346920
rcx            0x0                 0
rdx            0x7fffffffde14      140737488346644
rsi            0x0                 0
rdi            0x7fffffffd7c0      140737488345024
rbp            0x0                 0x0
rsp            0x7fffffffde10      0x7fffffffde10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf20      140737488346912
r14            0x0                 0
r15            0x0                 0
rip            0x400f3b            0x400f3b <phase_3+38>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d0x7fffffffde10 
0x7fffffffde10:	2 // first input should be equal to 2 which is less the 7
(gdb) ni
0x0000000000400f3e in phase_3 ()
(gdb) ni
0x0000000000400f45 in phase_3 ()
(gdb) ni
0x0000000000400f49 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:	sub    $0x18,%rsp
   0x0000000000400f19 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:	xor    %eax,%eax
   0x0000000000400f29 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:	mov    %rsp,%rdx
   0x0000000000400f31 <+28>:	mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:	cmp    $0x1,%eax
   0x0000000000400f3e <+41>:	jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:	callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:	cmpl   $0x7,(%rsp)
=> 0x0000000000400f49 <+52>:	ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:	mov    (%rsp),%eax
   0x0000000000400f4e <+57>:	jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:	mov    $0xc6,%eax
   0x0000000000400f5a <+69>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:	mov    $0x31e,%eax
   0x0000000000400f61 <+76>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:	mov    $0x299,%eax
   0x0000000000400f68 <+83>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:	mov    $0x3a,%eax
   0x0000000000400f6f <+90>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:	mov    $0x270,%eax
   0x0000000000400f76 <+97>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:	mov    $0x10b,%eax
   0x0000000000400f7d <+104>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:	mov    $0x80,%eax
   0x0000000000400f84 <+111>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:	callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:	mov    $0x0,%eax
   0x0000000000400f90 <+123>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:	mov    $0x3f,%eax
   0x0000000000400f97 <+130>:	cmp    0x4(%rsp),%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f9b <+134>:	je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:	callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:	mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:	xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:	je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:	add    $0x18,%rsp
   0x0000000000400fbb <+166>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400f4b in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:	sub    $0x18,%rsp
   0x0000000000400f19 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:	xor    %eax,%eax
   0x0000000000400f29 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:	mov    %rsp,%rdx
   0x0000000000400f31 <+28>:	mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:	cmp    $0x1,%eax
   0x0000000000400f3e <+41>:	jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:	callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:	ja     0x400f86 <phase_3+113>
=> 0x0000000000400f4b <+54>:	mov    (%rsp),%eax
   0x0000000000400f4e <+57>:	jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:	mov    $0xc6,%eax
   0x0000000000400f5a <+69>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:	mov    $0x31e,%eax
   0x0000000000400f61 <+76>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:	mov    $0x299,%eax
   0x0000000000400f68 <+83>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:	mov    $0x3a,%eax
   0x0000000000400f6f <+90>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:	mov    $0x270,%eax
   0x0000000000400f76 <+97>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:	mov    $0x10b,%eax
   0x0000000000400f7d <+104>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:	mov    $0x80,%eax
   0x0000000000400f84 <+111>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:	callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:	mov    $0x0,%eax
   0x0000000000400f90 <+123>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:	mov    $0x3f,%eax
   0x0000000000400f97 <+130>:	cmp    0x4(%rsp),%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f9b <+134>:	je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:	callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:	mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:	xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:	je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:	add    $0x18,%rsp
   0x0000000000400fbb <+166>:	retq   
End of assembler dump.
(gdb) u *0x0000000000400f97
0x0000000000400f97 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:	sub    $0x18,%rsp
   0x0000000000400f19 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:	xor    %eax,%eax
   0x0000000000400f29 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:	mov    %rsp,%rdx
   0x0000000000400f31 <+28>:	mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:	cmp    $0x1,%eax
   0x0000000000400f3e <+41>:	jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:	callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:	ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:	mov    (%rsp),%eax
   0x0000000000400f4e <+57>:	jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:	mov    $0xc6,%eax
   0x0000000000400f5a <+69>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:	mov    $0x31e,%eax
   0x0000000000400f61 <+76>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:	mov    $0x299,%eax
   0x0000000000400f68 <+83>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:	mov    $0x3a,%eax
   0x0000000000400f6f <+90>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:	mov    $0x270,%eax
   0x0000000000400f76 <+97>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:	mov    $0x10b,%eax
   0x0000000000400f7d <+104>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:	mov    $0x80,%eax
   0x0000000000400f84 <+111>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:	callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:	mov    $0x0,%eax
   0x0000000000400f90 <+123>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:	mov    $0x3f,%eax
=> 0x0000000000400f97 <+130>:	cmp    0x4(%rsp),%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f9b <+134>:	je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:	callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:	mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:	xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:	je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:	add    $0x18,%rsp
   0x0000000000400fbb <+166>:	retq   
End of assembler dump.
(gdb) i r
rax            0x31e               798 // we got the second degit since %eax is same as %rax 
rbx            0x7fffffffdf28      140737488346920
rcx            0x0                 0
rdx            0x7fffffffde14      140737488346644
rsi            0x0                 0
rdi            0x7fffffffd7c0      140737488345024
rbp            0x0                 0x0
rsp            0x7fffffffde10      0x7fffffffde10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf20      140737488346912
r14            0x0                 0
r15            0x0                 0
rip            0x400f97            0x400f97 <phase_3+130>
eflags         0x293               [ CF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d  0x7fffffffde10
0x7fffffffde10:	2
(gdb) d
Delete all breakpoints? (y or n) y
(gdb) r sol.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/lab-2/Desktop/Bomb/Assignment 1_2(1)/Assignment 1/bomb003/bomb sol.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
2 798 // finally we got the answer phase_3 answer
Halfway there!

