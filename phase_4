lab-2@lab2-OptiPlex-3040:~/Desktop/Bomb003/Assignment 1/bomb003$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) break phase_1
Breakpoint 1 at 0x400e8d
(gdb) run ans.txt
Starting program: /home/lab-2/Desktop/Bomb003/Assignment 1/bomb003/bomb ans.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!

Breakpoint 1, 0x0000000000400e8d in phase_1 ()  // run the phase_1 in order to continue executing phase_4 and phase_5 and saves all the  answers of the phase_, phase_2 and phase_3.
(gdb) disas
Dump of assembler code for function phase_1:
=> 0x0000000000400e8d <+0>:	sub    $0x8,%rsp
   0x0000000000400e91 <+4>:	mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:	callq  0x40132b <strings_not_equal>
   0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.
(gdb) x/s 0x4023b0
0x4023b0:	"Border relations with Canada have never been better."
(gdb) d 
Delete all breakpoints? (y or n) y
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/lab-2/Desktop/Bomb003/Assignment 1/bomb003/bomb ans.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
^Z
Program received signal SIGTSTP, Stopped (user).
0x00007ffff7ecd142 in __GI___libc_read (fd=0, buf=0x6058a0, nbytes=1024) at ../sysdeps/unix/sysv/linux/read.c:26
26	../sysdeps/unix/sysv/linux/read.c: No such file or directory.
(gdb) break phase_4
Breakpoint 2 at 0x400ffa
(gdb) run ans.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/lab-2/Desktop/Bomb003/Assignment 1/bomb003/bomb ans.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 9 // give the user input 

Breakpoint 2, 0x0000000000400ffa in phase_4 ()
(gdb) disas phase_4
Dump of assembler code for function phase_4:
=> 0x0000000000400ffa <+0>:	sub    $0x18,%rsp
   0x0000000000400ffe <+4>:	mov    %fs:0x28,%rax
   0x0000000000401007 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040100c <+18>:	xor    %eax,%eax
   0x000000000040100e <+20>:	lea    0x4(%rsp),%rcx // second input = %rcx
   0x0000000000401013 <+25>:	mov    %rsp,%rdx	//first input = %rdx
   0x0000000000401016 <+28>:	mov    $0x4025af,%esi	//format of answer: %d %d
   0x000000000040101b <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401020 <+38>:	cmp    $0x2,%eax		//if not equal to 2 jump to explode bomb
   0x0000000000401023 <+41>:	jne    0x40102b <phase_4+49>
   0x0000000000401025 <+43>:	cmpl   $0xe,(%rsp)		//%edx = 14
   0x0000000000401029 <+47>:	jbe    0x401030 <phase_4+54>	//if first input is < 14, skip bomb and jump to link<+54>
   0x000000000040102b <+49>:	callq  0x40142a <explode_bomb>
   0x0000000000401030 <+54>:	mov    $0xe,%edx 		//%edx = 14
   0x0000000000401035 <+59>:	mov    $0x0,%esi		//esi = 0
   0x000000000040103a <+64>:	mov    (%rsp),%edi		//%edi = first input
   0x000000000040103d <+67>:	callq  0x400fbc <func4>	//calls function <func4>
   0x0000000000401042 <+72>:	cmp    $0x2,%eax		//comp value 5 with %eax
   0x0000000000401045 <+75>:	jne    0x40104e <phase_4+84> 	//if not equal to 2 jump to explode bomb
   0x0000000000401047 <+77>:	cmpl   $0x2,0x4(%rsp)
   0x000000000040104c <+82>:	je     0x401053 <phase_4+89>	//if 2 == second input done
   0x000000000040104e <+84>:	callq  0x40142a <explode_bomb>
   0x0000000000401053 <+89>:	mov    0x8(%rsp),%rax
   0x0000000000401058 <+94>:	xor    %fs:0x28,%rax
   0x0000000000401061 <+103>:	je     0x401068 <phase_4+110>
   0x0000000000401063 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401068 <+110>:	add    $0x18,%rsp
   0x000000000040106c <+114>:	retq   
End of assembler dump.
(gdb) u* 0x0000000000401020
0x0000000000401020 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000400ffa <+0>:	sub    $0x18,%rsp
   0x0000000000400ffe <+4>:	mov    %fs:0x28,%rax
   0x0000000000401007 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040100c <+18>:	xor    %eax,%eax
   0x000000000040100e <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401013 <+25>:	mov    %rsp,%rdx
   0x0000000000401016 <+28>:	mov    $0x4025af,%esi
   0x000000000040101b <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000401020 <+38>:	cmp    $0x2,%eax
   0x0000000000401023 <+41>:	jne    0x40102b <phase_4+49>
   0x0000000000401025 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401029 <+47>:	jbe    0x401030 <phase_4+54>
   0x000000000040102b <+49>:	callq  0x40142a <explode_bomb>
   0x0000000000401030 <+54>:	mov    $0xe,%edx
   0x0000000000401035 <+59>:	mov    $0x0,%esi
   0x000000000040103a <+64>:	mov    (%rsp),%edi
   0x000000000040103d <+67>:	callq  0x400fbc <func4>
   0x0000000000401042 <+72>:	cmp    $0x2,%eax
   0x0000000000401045 <+75>:	jne    0x40104e <phase_4+84>
   0x0000000000401047 <+77>:	cmpl   $0x2,0x4(%rsp)
   0x000000000040104c <+82>:	je     0x401053 <phase_4+89>
   0x000000000040104e <+84>:	callq  0x40142a <explode_bomb>
   0x0000000000401053 <+89>:	mov    0x8(%rsp),%rax
   0x0000000000401058 <+94>:	xor    %fs:0x28,%rax
   0x0000000000401061 <+103>:	je     0x401068 <phase_4+110>
   0x0000000000401063 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401068 <+110>:	add    $0x18,%rsp
   0x000000000040106c <+114>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffdef8      140737488346872
rcx            0x0                 0
rdx            0x7fffffffdde4      140737488346596
rsi            0x0                 0
rdi            0x7fffffffd790      140737488344976
rbp            0x0                 0x0
rsp            0x7fffffffdde0      0x7fffffffdde0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f5aac0      140737353460416
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdef0      140737488346864
r14            0x0                 0
r15            0x0                 0
rip            0x401020            0x401020 <phase_4+38>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) u*0x0000000000401025 // jump to next compare to compare %rsp and 0xe
0x0000000000401025 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000400ffa <+0>:	sub    $0x18,%rsp
   0x0000000000400ffe <+4>:	mov    %fs:0x28,%rax
   0x0000000000401007 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040100c <+18>:	xor    %eax,%eax
   0x000000000040100e <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401013 <+25>:	mov    %rsp,%rdx
   0x0000000000401016 <+28>:	mov    $0x4025af,%esi
   0x000000000040101b <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401020 <+38>:	cmp    $0x2,%eax
   0x0000000000401023 <+41>:	jne    0x40102b <phase_4+49>
=> 0x0000000000401025 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401029 <+47>:	jbe    0x401030 <phase_4+54>
   0x000000000040102b <+49>:	callq  0x40142a <explode_bomb>
   0x0000000000401030 <+54>:	mov    $0xe,%edx
   0x0000000000401035 <+59>:	mov    $0x0,%esi
   0x000000000040103a <+64>:	mov    (%rsp),%edi
   0x000000000040103d <+67>:	callq  0x400fbc <func4>
   0x0000000000401042 <+72>:	cmp    $0x2,%eax
   0x0000000000401045 <+75>:	jne    0x40104e <phase_4+84>
   0x0000000000401047 <+77>:	cmpl   $0x2,0x4(%rsp)
   0x000000000040104c <+82>:	je     0x401053 <phase_4+89>
   0x000000000040104e <+84>:	callq  0x40142a <explode_bomb>
   0x0000000000401053 <+89>:	mov    0x8(%rsp),%rax
   0x0000000000401058 <+94>:	xor    %fs:0x28,%rax
   0x0000000000401061 <+103>:	je     0x401068 <phase_4+110>
   0x0000000000401063 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401068 <+110>:	add    $0x18,%rsp
   0x000000000040106c <+114>:	retq   
End of assembler dump. //get to know the value stored in %rsp at <+43> 
(gdb) x/d $rsp
0x7fffffffdde0:	1
(gdb) x/d $rsp+4
0x7fffffffdde4:	9  // we got to know that $rsp holds first input and $rsp+4 holds the second input. from that we got to know that first input is between 2 and 14.
(gdb) u*0x000000000040103d // have to enter into func4 to know more about phase_4
0x000000000040103d in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x0000000000400ffa <+0>:	sub    $0x18,%rsp
   0x0000000000400ffe <+4>:	mov    %fs:0x28,%rax
   0x0000000000401007 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040100c <+18>:	xor    %eax,%eax
   0x000000000040100e <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401013 <+25>:	mov    %rsp,%rdx
   0x0000000000401016 <+28>:	mov    $0x4025af,%esi
   0x000000000040101b <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401020 <+38>:	cmp    $0x2,%eax
   0x0000000000401023 <+41>:	jne    0x40102b <phase_4+49>
   0x0000000000401025 <+43>:	cmpl   $0xe,(%rsp)
   0x0000000000401029 <+47>:	jbe    0x401030 <phase_4+54>
   0x000000000040102b <+49>:	callq  0x40142a <explode_bomb>
   0x0000000000401030 <+54>:	mov    $0xe,%edx
   0x0000000000401035 <+59>:	mov    $0x0,%esi
   0x000000000040103a <+64>:	mov    (%rsp),%edi
=> 0x000000000040103d <+67>:	callq  0x400fbc <func4>
   0x0000000000401042 <+72>:	cmp    $0x2,%eax
   0x0000000000401045 <+75>:	jne    0x40104e <phase_4+84>
   0x0000000000401047 <+77>:	cmpl   $0x2,0x4(%rsp)
   0x000000000040104c <+82>:	je     0x401053 <phase_4+89>
   0x000000000040104e <+84>:	callq  0x40142a <explode_bomb>
   0x0000000000401053 <+89>:	mov    0x8(%rsp),%rax
   0x0000000000401058 <+94>:	xor    %fs:0x28,%rax
   0x0000000000401061 <+103>:	je     0x401068 <phase_4+110>
   0x0000000000401063 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401068 <+110>:	add    $0x18,%rsp
   0x000000000040106c <+114>:	retq   
End of assembler dump.
(gdb) si 			// to get inside the func4
0x0000000000400fbc in func4 ()
(gdb) disas
Dump of assembler code for function func4:
=> 0x0000000000400fbc <+0>:	sub    $0x8,%rsp	//makes stack frame
   0x0000000000400fc0 <+4>:	mov    %edx,%eax	//eax = 14
   0x0000000000400fc2 <+6>:	sub    %esi,%eax	//eax = eax - esi; eax = 14-0 ----> 14
   0x0000000000400fc4 <+8>:	mov    %eax,%ecx	//ecx = 14
   0x0000000000400fc6 <+10>:	shr    $0x1f,%ecx	//0x1f = 31; ecx = 14 >>31; returns most sigfig bit --->0
   0x0000000000400fc9 <+13>:	add    %ecx,%eax	//eax = eax + ecx; eax = 14 + 0 = 14
   0x0000000000400fcb <+15>:	sar    %eax		//eax = eax >> 1; 14 >> 1 --> same as eax/2
   0x0000000000400fcd <+17>:	lea    (%rax,%rsi,1),%ecx //ecx = eax + rsi ---> ecx = 7	
   0x0000000000400fd0 <+20>:	cmp    %edi,%ecx		//first input Vs ecx
   0x0000000000400fd2 <+22>:	jle    0x400fe0 <func4+36>	//if 7 <= first input, jump pass recursion call
   0x0000000000400fd4 <+24>:	lea    -0x1(%rcx),%edx		//edx = rcx - 1
   0x0000000000400fd7 <+27>:	callq  0x400fbc <func4>	//back to beginning
   0x0000000000400fdc <+32>:	add    %eax,%eax		//eax = eax + eax
   0x0000000000400fde <+34>:	jmp    0x400ff5 <func4+57>
   0x0000000000400fe0 <+36>:	mov    $0x0,%eax		//eax = 0
   0x0000000000400fe5 <+41>:	cmp    %edi,%ecx		//ecx = 7; first input Vs 7
   0x0000000000400fe7 <+43>:	jge    0x400ff5 <func4+57>	//%eax >= edi --> 7 >= first input
   0x0000000000400fe9 <+45>:	lea    0x1(%rcx),%esi		//%esi = 1 + %rcx --> %esi = 1 + 7 = 8, we are incrementing rcx each time
   0x0000000000400fec <+48>:	callq  0x400fbc <func4>	//Goes back to beginning
   0x0000000000400ff1 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000400ff5 <+57>:	add    $0x8,%rsp		//We are returning back eax which we want to be 4 
   0x0000000000400ff9 <+61>:	retq   
End of assembler dump. // finally we know that numbers are between 2 and 14 and it involves recursion. we also know that last input needs to be 2.so format for the answer is "x 2".
(gdb) 


